name: Build and Test

on:
  push:
    branches: [ main ]
    tags: ['v*']
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  test:
    name: Test on ${{ matrix.os }} Python ${{ matrix.python-version }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, macos-13]
        python-version: ["3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Install OpenMP (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        python -m pip install pytest cython setuptools wheel cysignals
        
    - name: Build and install package
      run: |
        # First build the C library
        cmake .
        make
        
        # Set environment variables for macOS runners
        if [[ "$RUNNER_OS" == "macOS" ]]; then
          # For Python 3.11+ set universal2 build flags to ensure compatibility
          if [[ "${{ matrix.python-version }}" > "3.10" ]]; then
            echo "Setting ARCHFLAGS for universal2 build"
            export ARCHFLAGS="-arch arm64 -arch x86_64"
          fi
        fi
        
        # Then install the package in development mode using setuptools directly
        python setup.py develop
        
    - name: Test with pytest
      run: |
        pytest

  build_wheels:
    name: Build wheels on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    needs: test
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest]
        
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install OpenMP (macOS)
      if: runner.os == 'macOS'
      run: |
        brew install libomp
        
    - name: Install cibuildwheel
      run: |
        python -m pip install cibuildwheel
        
    - name: Build wheels
      env:
        CIBW_ARCHS_MACOS: "x86_64 arm64"
        CIBW_BUILD: "cp310-* cp311-* cp312-*"
        CIBW_SKIP: "*-musllinux_* pp*"
        CIBW_BEFORE_BUILD_LINUX: "pip install cython setuptools wheel cysignals && cmake . && make"
        CIBW_BEFORE_BUILD_MACOS: "brew install libomp && pip install cython setuptools wheel cysignals && cmake . && make"
        CIBW_ENVIRONMENT_MACOS: "ARCHFLAGS='-arch arm64 -arch x86_64' LIBRARY_PATH=$(pwd):$LIBRARY_PATH LD_LIBRARY_PATH=$(pwd):$LD_LIBRARY_PATH"
        CIBW_BUILD_FRONTEND: "pip"
      run: |
        python -m cibuildwheel --output-dir wheelhouse
        
    - name: Upload wheels as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: wheels-${{ matrix.os }}
        path: ./wheelhouse/*.whl
        
  publish:
    name: Publish to PyPI
    runs-on: ubuntu-latest
    needs: build_wheels
    if: github.event_name == 'push' && startsWith(github.ref, 'refs/tags/v')
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Download wheels
      uses: actions/download-artifact@v4
      with:
        path: dist
        pattern: wheels-*
        merge-multiple: true
        
    - name: Build source distribution
      run: |
        python -m build --sdist
        
    - name: Publish to PyPI
      if: startsWith(github.ref, 'refs/tags/v')
      env:
        TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
        TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
      run: |
        twine upload dist/*
